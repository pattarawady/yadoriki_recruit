openapi: 3.0.0
info:
  title: Candidate Evaluator API (Gemini & Text Input) # Modified title
  description: |-
    Submit candidate information via text input,
    evaluate them using Google Gemini based on predefined criteria,
    view results on a dashboard (data held temporarily by the client),
    and export the results as CSV or Markdown.
    Does NOT use a persistent database.
  version: 1.1.0 # Incremented version
servers:
  - url: /api
    description: API Server

paths:
  /evaluate:
    post:
      summary: Evaluate candidate from text input # Modified summary
      description: |-
        Accepts plain text containing information about a single candidate.
        The API sends the text to Google Gemini (applying specified criteria and weights),
        calculates match scores internally based on Gemini's structured output,
        and returns a single evaluation result object for the candidate.
        The client (browser) should hold these results for display and potential export.
        It's recommended the client accumulates results if multiple evaluations are performed before exporting.
      operationId: evaluateCandidateFromText # Modified operationId
      requestBody:
        required: true
        description: JSON object containing the candidate's information as text.
        content:
          application/json: # Changed from multipart/form-data
            schema:
              type: object
              properties:
                candidate_text:
                  type: string
                  description: The raw text containing information about the candidate (e.g., copied from a resume).
                  example: "氏名: 山田 太郎\n年齢: 28歳\n職務経歴:\n- 〇〇ホテル フロントスタッフ (3年)\n- ××旅館 アシスタントマネージャー (2年)\n備考: 正社員希望、副業は考えていない。"
              required:
                - candidate_text
      responses:
        '200':
          description: Successfully processed the text and returned a single evaluation result.
          content:
            application/json:
              schema:
                # Returns a single EvaluationResult object, not an array
                $ref: '#/components/schemas/EvaluationResult'
              example: # Example structure of the single result response
                candidate_identifier: "山田 太郎" # Extracted or generated by AI/backend
                gemini_evaluation:
                  evaluation:
                    required:
                      age: {symbol: "◎", reason: "28歳で条件内"}
                      side_job: {symbol: "◎", reason: "副業は考えていない"}
                      outsourcing: {symbol: "◎", reason: "正社員希望"}
                    preferred:
                      experience: {symbol: "〇", reason: "ホテル・旅館経験5年"}
                      management_level: {symbol: "△", reason: "28歳でアシスタントマネージャー経験あり"}
                    other:
                      job_change_desire: {symbol: "◎", reason: "記載からは転職希望と判断"}
                      adaptability: {symbol: "〇", reason: "複数施設での経験あり"}
                      teamwork: {symbol: "△", reason: "チームワークに関する具体的な記述は少ない"}
                  overall_comment: "必須条件を満たし、経験も十分。マネージャーレベルのポテンシャルはあるが、要面接確認。"
                calculated_scores:
                  required_score: 60.0
                  preferred_score: 25.5 # Example: (0.7*0.5 + 0.3*0.5) * 30
                  other_score: 7.1  # Example: (1.0*0.4 + 0.7*0.3 + 0.3*0.3) * 10
                  total_match_percentage: 92.6
                raw_input_text: "氏名: 山田 太郎\n年齢: 28歳\n職務経歴:\n- 〇〇ホテル フロントスタッフ (3年)\n- ××旅館 アシスタントマネージャー (2年)\n備考: 正社員希望、副業は考えていない。" # Optional: include input text
        '400':
          description: Bad Request - Invalid input (e.g., missing candidate_text, text too long if limits apply).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/GeminiApiError'

  /export:
    post:
      summary: Export provided evaluation results # No change needed here conceptually
      description: |-
        Takes an array of evaluation results (typically obtained from one or more previous /evaluate calls and held/accumulated by the client)
        and generates a downloadable file in the specified format (CSV or Markdown).
      operationId: exportEvaluationResults # No change needed
      parameters:
        - name: format
          in: query
          required: true
          description: The desired output format.
          schema:
            type: string
            enum: [csv, md]
      requestBody:
        required: true
        description: JSON array containing the evaluation results (one or more EvaluationResult objects) to be exported.
        content:
          application/json:
            schema:
              type: array # Expecting an array, as client might accumulate results
              items:
                $ref: '#/components/schemas/EvaluationResult'
      responses:
        # Responses remain the same (200 with file, 400, 500)
        '200':
          description: Successfully generated the export file. The Content-Type indicates the format.
          content:
            text/csv:
              schema: { type: string, format: binary }
              headers:
                Content-Disposition: { schema: { type: string }, description: 'e.g., attachment; filename="evaluation_results.csv"' }
            text/markdown:
              schema: { type: string, format: binary }
              headers:
                Content-Disposition: { schema: { type: string }, description: 'e.g., attachment; filename="evaluation_results.md"' }
        '400':
          $ref: '#/components/responses/BadRequest' # e.g., invalid format, malformed JSON body
        '500':
          $ref: '#/components/responses/InternalServerError' # e.g., error during file generation

components:
  schemas:
    # Removed ParsedCandidateInfo as it's less relevant for the API contract with text input

    # Gemini's Expected Output (No change needed)
    GeminiEvaluationOutput:
      # ... (schema definition remains the same) ...
      type: object
      description: Structured evaluation data expected from Gemini API based on the prompt.
      properties:
        evaluation:
          type: object
          properties:
            required:
              type: object
              properties:
                age: {$ref: '#/components/schemas/CriterionEvaluation'}
                side_job: {$ref: '#/components/schemas/CriterionEvaluation'}
                outsourcing: {$ref: '#/components/schemas/CriterionEvaluation'}
              required: [age, side_job, outsourcing]
            preferred:
              type: object
              properties:
                experience: {$ref: '#/components/schemas/CriterionEvaluation'}
                management_level: {$ref: '#/components/schemas/CriterionEvaluation'}
              required: [experience, management_level]
            other:
              type: object
              properties:
                job_change_desire: {$ref: '#/components/schemas/CriterionEvaluation'}
                adaptability: {$ref: '#/components/schemas/CriterionEvaluation'}
                teamwork: {$ref: '#/components/schemas/CriterionEvaluation'}
              required: [job_change_desire, adaptability, teamwork]
          required: [required, preferred, other]
        # Add candidate identifier extraction to the prompt
        candidate_identifier:
           type: string
           description: Name or identifier of the candidate, extracted by Gemini from the input text.
        overall_comment:
          type: string
          description: Gemini's summary and comments for the hiring manager.
      required: [evaluation, candidate_identifier, overall_comment] # Added candidate_identifier

    # Individual criterion evaluation by Gemini (No change needed)
    CriterionEvaluation:
      # ... (schema definition remains the same) ...
      type: object
      properties:
        symbol: { type: string, enum: ["◎", "〇", "△", "×"] }
        reason: { type: string }
      required: [symbol, reason]

    # Scores calculated by the backend (No change needed)
    CalculatedScores:
      # ... (schema definition remains the same) ...
      type: object
      description: Scores calculated server-side based on Gemini's evaluation symbols and defined weights.
      properties:
        required_score: { type: number, format: float }
        preferred_score: { type: number, format: float }
        other_score: { type: number, format: float }
        total_match_percentage: { type: number, format: float }
      required: [required_score, preferred_score, other_score, total_match_percentage]

    # Final combined result for one candidate (Added raw_input_text)
    EvaluationResult:
      type: object
      description: The complete evaluation result for a single candidate.
      properties:
        # candidate_identifier is now part of GeminiEvaluationOutput
        gemini_evaluation:
          $ref: '#/components/schemas/GeminiEvaluationOutput'
        calculated_scores:
          $ref: '#/components/schemas/CalculatedScores'
        raw_input_text: # Added this field
          type: string
          description: The original text input provided by the user for this evaluation. Useful for reference.
      required:
        - gemini_evaluation
        - calculated_scores
        # raw_input_text can be optional if not always needed

    # Standard Error Response (No change needed)
    ErrorResponse:
      # ... (schema definition remains the same) ...
      type: object
      properties: { error_code: { type: string }, message: { type: string } }
      required: [message]

  responses: # Reusable response components (No change needed)
    BadRequest:
      # ... (definition remains the same) ...
      description: Bad Request - The request could not be understood or processed (e.g., missing candidate_text, malformed JSON).
      content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
    InternalServerError:
      # ... (definition remains the same) ...
      description: Internal Server Error - An unexpected error occurred on the server side.
      content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
    GeminiApiError:
      # ... (definition remains the same) ...
      description: Service Unavailable - Error communicating with or processing response from the Google Gemini API.
      content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
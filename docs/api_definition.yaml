openapi: 3.0.0
info:
  title: Candidate Evaluator API (Gemini & Text Input)
  description: |-
    Submit candidate information via text input,
    evaluate them using Google Gemini based on predefined criteria (externalized in config),
    calculate match scores, return structured results,
    and allow exporting accumulated results.
    Does NOT use a persistent database.
  version: 1.2.0 # バージョン更新
servers:
  - url: /api
    description: API Server

paths:
  /evaluate:
    post:
      summary: Evaluate candidate from text input
      description: |-
        Accepts plain text containing information about a single candidate.
        1. Cleans the input text based on predefined rules.
        2. Sends the cleaned text and prompt (from config) to Google Gemini.
        3. Calculates match scores based on Gemini's structured JSON output and weights (from config).
        4. Returns a single JSON object containing both Gemini's evaluation and the calculated scores.
      operationId: evaluateCandidateFromText
      requestBody:
        required: true
        description: JSON object containing the candidate's information as text.
        content:
          application/json:
            schema:
              type: object
              properties:
                candidate_text:
                  type: string
                  description: The raw text containing information about the candidate.
              required:
                - candidate_text
      responses:
        '200':
          description: Successfully processed the text and returned evaluation result with scores.
          content:
            application/json:
              schema:
                # === レスポンス構造を最終版に修正 ===
                type: object
                properties:
                  gemini_evaluation:
                    $ref: '#/components/schemas/GeminiEvaluationOutput' # Geminiの評価結果
                  calculated_scores:
                    $ref: '#/components/schemas/CalculatedScores'   # 計算されたスコア
                required:
                  - gemini_evaluation
                  - calculated_scores
              example: # Example structure of the single result response
                gemini_evaluation:
                  candidate_identifier: "友田 史織"
                  evaluation:
                    required: { age: {symbol: "◎", reason: "..."}, side_job: {symbol: "◎", reason: "..."}, outsourcing: {symbol: "◎", reason: "..."} }
                    preferred: { experience: {symbol: "◎", reason: "..."}, management_level: {symbol: "△", reason: "..."} }
                    other: { job_change_desire: {symbol: "◎", reason: "..."}, adaptability: {symbol: "〇", reason: "..."}, teamwork: {symbol: "〇", reason: "..."} }
                  overall_comment: "総合的に見て、採用条件とのマッチ度は高い候補者と考えられます。"
                calculated_scores:
                  required_score: 60.0
                  preferred_score: 19.5
                  other_score: 8.2
                  total_match_percentage: 87.7
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/GeminiApiError'

  /export: # このエンドポイントは変更なし
    post:
      summary: Export provided evaluation results
      description: |-
        Takes an array of evaluation results (accumulated by the client)
        and generates a downloadable file in the specified format (CSV or Markdown).
      operationId: exportEvaluationResults
      parameters:
        - name: format
          in: query
          required: true
          schema: { type: string, enum: [csv, md] }
      requestBody:
        required: true
        description: JSON array containing the evaluation results (full objects with gemini_evaluation and calculated_scores).
        content:
          application/json:
            schema:
              type: array
              items: # 配列の各要素が /evaluate のレスポンスと同じ構造
                 type: object
                 properties:
                   gemini_evaluation: {$ref: '#/components/schemas/GeminiEvaluationOutput'}
                   calculated_scores: {$ref: '#/components/schemas/CalculatedScores'}
                 required: [gemini_evaluation, calculated_scores]
      responses:
        '200':
          description: Successfully generated the export file.
          content:
            text/csv: { schema: { type: string, format: binary }, headers: { Content-Disposition: { schema: { type: string } } } }
            text/markdown: { schema: { type: string, format: binary }, headers: { Content-Disposition: { schema: { type: string } } } }
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    # Gemini's Expected Output (変更なし)
    GeminiEvaluationOutput:
      type: object
      properties:
        evaluation: { $ref: '#/components/schemas/EvaluationDetailsMap' }
        candidate_identifier: { type: string }
        overall_comment: { type: string }
      required: [evaluation, candidate_identifier, overall_comment]

    EvaluationDetailsMap: # evaluationの中身 (変更なし)
       type: object
       properties:
         required: { $ref: '#/components/schemas/CategoryItems' }
         preferred: { $ref: '#/components/schemas/CategoryItems' }
         other: { $ref: '#/components/schemas/CategoryItems' }
       required: [required, preferred, other]

    CategoryItems: # 各カテゴリの中身 (変更なし)
       type: object
       additionalProperties: # 項目キー(ageなど)は可変なので additionalProperties を使う
         $ref: '#/components/schemas/CriterionEvaluation'

    CriterionEvaluation: # 各項目の評価 (変更なし)
      type: object
      properties: { symbol: { type: string, enum: ["◎", "〇", "△", "×"] }, reason: { type: string } }
      required: [symbol, reason]

    # Calculated Scores (変更なし)
    CalculatedScores:
      type: object
      properties:
        required_score: { type: number, format: float }
        preferred_score: { type: number, format: float }
        other_score: { type: number, format: float }
        total_match_percentage: { type: number, format: float }
      required: [required_score, preferred_score, other_score, total_match_percentage]

    # Standard Error Response (変更なし)
    ErrorResponse: { type: object, properties: { message: { type: string } }, required: [message] }

  responses: # (変更なし)
    BadRequest: { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    InternalServerError: { description: Internal Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    GeminiApiError: { description: Service Unavailable (Gemini API issue), content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }